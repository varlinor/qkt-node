import fs from 'fs-extra'
import path from 'path'
import { camelCase, upperFirst } from 'lodash-es'
import { selectSfc, normalizePath } from '@varlinor/node-tools'

/**
 * 基于包的根目录生成组件定义文件，针对ts编写的vue3的sfc
 * @param packageRoot
 * @param isTs
 */
export async function generateSfcDefineAndEntryFiles(
  packageRoot: string,
  isTs: boolean = false,
  isOutputEntry: boolean = true
) {
  if (!packageRoot) {
    packageRoot = process.cwd()
  }
  console.log('current package root dir:', packageRoot)
  // 检查components.json
  const defPath = path.join(packageRoot, 'components.json')
  const comDefs = []
  let preComDefs = []
  if (fs.existsSync(defPath)) {
    const comDefsInfo = fs.readFileSync(defPath, 'utf-8')
    if (comDefsInfo) {
      try {
        preComDefs = JSON.parse(comDefsInfo)
      } catch (error) {
        console.error('Error parsing components.json:', error)
      }
    }
  }
  const selected = await selectSfc(packageRoot, isTs)
  const srcScriptSuffix = isTs ? '.ts' : '.js'

  if (Array.isArray(selected)) {
    const packageName = path.basename(packageRoot)
    console.log('packageName:', packageName)
    selected.forEach((file) => {
      // console.log('per file:', file)
      const name = path.basename(file, '.vue')
      const parentPath = path.dirname(file)
      let filename,
        outputFileName,
        exportName,
        importPath,
        basedir,
        hasInstall = false
      // 如果原组件里包含index.vue或者index.js，则不自动生成
      const idxFilePath = path.join(parentPath, `index${srcScriptSuffix}`)
      const parentDirName = path.basename(parentPath)
      if (!fs.existsSync(idxFilePath)) {
        let createEntry = false
        if ('index' === name) {
          //  有index.vue
          filename = 'index.vue'
          exportName = `Rts${upperFirst(camelCase(parentDirName))}`
        } else if ('main' === name) {
          filename = `index${srcScriptSuffix}`
          exportName = `Rts${upperFirst(camelCase(parentDirName))}`
          createEntry = true
        } else {
          filename = `index-${name}${srcScriptSuffix}`
          exportName = `Rts${upperFirst(camelCase(name))}`
          outputFileName = name
          createEntry = true
        }
        importPath = `./${name}.vue`

        const entryFile = path.join(parentPath, filename)
        if (fs.existsSync(entryFile)) {
          hasInstall = true
        }
        if (createEntry && isOutputEntry) {
          // 生成entry文件
          const entryContent = formatEntryContent({
            exportName,
            relatePath: importPath
          })
          fs.writeFileSync(entryFile, entryContent)
          console.log('generate entry file:' + entryFile)
        }
      } else {
        // 有index.js
        hasInstall = true
        filename = `index${srcScriptSuffix}`
        exportName = `Rts${upperFirst(camelCase(parentDirName))}`
      }

      // packages开头
      basedir = `packages/${packageName}${normalizePath(parentPath).replace(
        normalizePath(packageRoot),
        ''
      )}`
      comDefs.push({
        filename,
        exportName,
        importPath,
        packageName,
        basedir,
        outputFileName,
        hasInstall
      })
    })

    preComDefs.forEach((preDef) => {
      const same = comDefs.find((c) => {
        const tmpE = path.join(packageRoot, c.basedir, c.filename)
        if (!c.hasInstall && fs.existsSync(tmpE)) {
          c.hasInstall = true
        }
        return (
          c.exportName === preDef.exportName &&
          c.basedir === preDef.basedir &&
          c.filename === preDef.filename
        )
      })
      const entryFile = path.join(packageRoot, preDef.basedir.replace(`packages/${packageName}`,''), preDef.filename)
      if (!same && !preDef.hasInstall) {
        const entryContent = formatEntryContent({
          exportName: preDef.exportName,
          relatePath: preDef.importPath
        })
        fs.writeFileSync(entryFile, entryContent)
        console.log('Generated missing entry file:', entryFile)

        // 更新 preDef 的 hasInstall 状态
        preDef.hasInstall = true
        comDefs.push(preDef)
      }
    })

    if (comDefs.length) {
      fs.writeFileSync(defPath, JSON.stringify(comDefs, null, 2))
      console.log(`Components Define file [${defPath}] is generated!`)
    }else{
      console.log('No file need to be output!');
    }
  }

  return { defineInfos: comDefs, selectedFiles: selected }
}

/**
 * 格式化单个组件的install内容
 * @param {*} comInfo {exportName,relatePath}
 * @returns
 */
export function formatEntryContent(comInfo) {
  return `
/* Automatically generated by '@varlinor/cli' */

import ${comInfo.exportName} from '${comInfo.relatePath}'

${comInfo.exportName}.install = function (Vue) {
  Vue.component('${comInfo.exportName}', ${comInfo.exportName})
}

export default ${comInfo.exportName}
`.trim()
}
